// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Example User model (adjust based on your NextAuth.js setup and adapter)
model User {
  id               String        @id @default(cuid())
  email            String?       @unique
  emailVerified    DateTime? // Added for Prisma Adapter compatibility
  name             String?
  image            String?
  tiktokUsername   String?
  tiktokUnionId    String? // Added to store TikTok union ID
  pinterestUsername String?

  postedVideos     PostedVideo[] // Relation to PostedVideo model

  accounts         Account[]
  sessions         Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PostedVideo {
  id             String   @id @default(cuid())
  userId         String   // ID of the user who posted the video
  tiktokVideoId  String   // The ID of the TikTok video
  pinterestPinId String?  // Optional: The ID of the created Pinterest pin
  createdAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [id]) // Relation to User model

  @@unique([userId, tiktokVideoId]) // Ensure a user can only post a TikTok video once
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
